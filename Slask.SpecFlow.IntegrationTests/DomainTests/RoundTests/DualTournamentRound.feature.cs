// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Slask.SpecFlow.IntegrationTests.DomainTests.RoundTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DualTournamentRoundFeature : Xunit.IClassFixture<DualTournamentRoundFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "DualTournamentRound.feature"
#line hidden
        
        public DualTournamentRoundFeature(DualTournamentRoundFeature.FixtureData fixtureData, InternalSpecFlow.XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DualTournamentRound", "\tDoes a bunch of tests on Dual tournament rounds", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Can create dual tournament round")]
        [Xunit.TraitAttribute("FeatureTitle", "DualTournamentRound")]
        [Xunit.TraitAttribute("Description", "Can create dual tournament round")]
        [Xunit.TraitAttribute("Category", "DualTournamentTag")]
        public virtual void CanCreateDualTournamentRound()
        {
            string[] tagsOfScenario = new string[] {
                    "DualTournamentTag"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create dual tournament round", null, new string[] {
                        "DualTournamentTag"});
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table16.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round",
                            "3"});
#line 6
 testRunner.When("a tournament creates rounds", ((string)(null)), table16, "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table17.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round",
                            "3",
                            "2"});
#line 9
 testRunner.Then("created rounds in tournament should be valid with values:", ((string)(null)), table17, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Advancing amount in dual tournament rounds cannot be anything other than two")]
        [Xunit.TraitAttribute("FeatureTitle", "DualTournamentRound")]
        [Xunit.TraitAttribute("Description", "Advancing amount in dual tournament rounds cannot be anything other than two")]
        public virtual void AdvancingAmountInDualTournamentRoundsCannotBeAnythingOtherThanTwo()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Advancing amount in dual tournament rounds cannot be anything other than two", null, ((string[])(null)));
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table18.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 1",
                            "3",
                            "0"});
                table18.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 2",
                            "3",
                            "1"});
                table18.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 3",
                            "3",
                            "3"});
#line 14
 testRunner.When("a tournament creates rounds", ((string)(null)), table18, "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table19.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 1",
                            "3",
                            "2"});
                table19.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 2",
                            "3",
                            "2"});
                table19.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 3",
                            "3",
                            "2"});
#line 19
 testRunner.Then("created rounds in tournament should be valid with values:", ((string)(null)), table19, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create dual tournament round without name")]
        [Xunit.TraitAttribute("FeatureTitle", "DualTournamentRound")]
        [Xunit.TraitAttribute("Description", "Cannot create dual tournament round without name")]
        public virtual void CannotCreateDualTournamentRoundWithoutName()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create dual tournament round without name", null, ((string[])(null)));
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table20.AddRow(new string[] {
                            "Dual tournament",
                            "",
                            "3"});
#line 26
 testRunner.When("a tournament creates rounds", ((string)(null)), table20, "When ");
#line hidden
#line 29
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create dual tournament round with even best ofs")]
        [Xunit.TraitAttribute("FeatureTitle", "DualTournamentRound")]
        [Xunit.TraitAttribute("Description", "Cannot create dual tournament round with even best ofs")]
        public virtual void CannotCreateDualTournamentRoundWithEvenBestOfs()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create dual tournament round with even best ofs", null, ((string[])(null)));
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table21.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 1",
                            "0"});
                table21.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 2",
                            "2"});
                table21.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 3",
                            "4"});
#line 32
 testRunner.When("a tournament creates rounds", ((string)(null)), table21, "When ");
#line hidden
#line 37
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
  testRunner.And("created round 1 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
  testRunner.And("created round 2 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create dual tournament round with best ofs less than zero")]
        [Xunit.TraitAttribute("FeatureTitle", "DualTournamentRound")]
        [Xunit.TraitAttribute("Description", "Cannot create dual tournament round with best ofs less than zero")]
        public virtual void CannotCreateDualTournamentRoundWithBestOfsLessThanZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create dual tournament round with best ofs less than zero", null, ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table22.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 1",
                            "-1"});
                table22.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 2",
                            "-2"});
                table22.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 3",
                            "-3"});
#line 42
 testRunner.When("a tournament creates rounds", ((string)(null)), table22, "When ");
#line hidden
#line 47
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
  testRunner.And("created round 1 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
  testRunner.And("created round 2 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DualTournamentRoundFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DualTournamentRoundFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
