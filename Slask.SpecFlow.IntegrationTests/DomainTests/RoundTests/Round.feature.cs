// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Slask.SpecFlow.IntegrationTests.DomainTests.RoundTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class RoundFeature : Xunit.IClassFixture<RoundFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Round.feature"
#line hidden
        
        public RoundFeature(RoundFeature.FixtureData fixtureData, InternalSpecFlow.XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Round", "\tDoes a bunch of tests on Rounds", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Can create bracket round")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Can create bracket round")]
        [Xunit.TraitAttribute("Category", "RoundTag")]
        public virtual void CanCreateBracketRound()
        {
            string[] tagsOfScenario = new string[] {
                    "RoundTag"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create bracket round", null, new string[] {
                        "RoundTag"});
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table23.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3"});
#line 6
 testRunner.When("a tournament creates rounds", ((string)(null)), table23, "When ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table24.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3",
                            "1"});
#line 9
 testRunner.Then("created rounds in tournament should be valid with values:", ((string)(null)), table24, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Can create dual tournament round")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Can create dual tournament round")]
        public virtual void CanCreateDualTournamentRound()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create dual tournament round", null, ((string[])(null)));
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table25.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round",
                            "3"});
#line 14
 testRunner.When("a tournament creates rounds", ((string)(null)), table25, "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table26.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round",
                            "3",
                            "2"});
#line 17
 testRunner.Then("created rounds in tournament should be valid with values:", ((string)(null)), table26, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Can create round robin round")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Can create round robin round")]
        public virtual void CanCreateRoundRobinRound()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can create round robin round", null, ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table27.AddRow(new string[] {
                            "Round robin",
                            "Round robin round",
                            "3",
                            "1"});
#line 22
 testRunner.When("a tournament creates rounds", ((string)(null)), table27, "When ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table28.AddRow(new string[] {
                            "Round robin",
                            "Round robin round",
                            "3",
                            "1"});
#line 25
 testRunner.Then("created rounds in tournament should be valid with values:", ((string)(null)), table28, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Advancing amount in bracket rounds cannot be anything other than two")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Advancing amount in bracket rounds cannot be anything other than two")]
        public virtual void AdvancingAmountInBracketRoundsCannotBeAnythingOtherThanTwo()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Advancing amount in bracket rounds cannot be anything other than two", null, ((string[])(null)));
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table29.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 1",
                            "3",
                            "0"});
                table29.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 2",
                            "3",
                            "2"});
                table29.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 3",
                            "3",
                            "3"});
#line 30
 testRunner.When("a tournament creates rounds", ((string)(null)), table29, "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table30.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 1",
                            "3",
                            "1"});
                table30.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 2",
                            "3",
                            "1"});
                table30.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 3",
                            "3",
                            "1"});
#line 35
 testRunner.Then("created rounds in tournament should be valid with values:", ((string)(null)), table30, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Advancing amount in dual tournament rounds cannot be anything other than two")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Advancing amount in dual tournament rounds cannot be anything other than two")]
        public virtual void AdvancingAmountInDualTournamentRoundsCannotBeAnythingOtherThanTwo()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Advancing amount in dual tournament rounds cannot be anything other than two", null, ((string[])(null)));
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table31.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 1",
                            "3",
                            "0"});
                table31.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 2",
                            "3",
                            "1"});
                table31.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 3",
                            "3",
                            "3"});
#line 42
 testRunner.When("a tournament creates rounds", ((string)(null)), table31, "When ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table32.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 1",
                            "3",
                            "2"});
                table32.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 2",
                            "3",
                            "2"});
                table32.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 3",
                            "3",
                            "2"});
#line 47
 testRunner.Then("created rounds in tournament should be valid with values:", ((string)(null)), table32, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create bracket round without name")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create bracket round without name")]
        public virtual void CannotCreateBracketRoundWithoutName()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create bracket round without name", null, ((string[])(null)));
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table33.AddRow(new string[] {
                            "Bracket",
                            "",
                            "3"});
#line 54
 testRunner.When("a tournament creates rounds", ((string)(null)), table33, "When ");
#line hidden
#line 57
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create dual tournament round without name")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create dual tournament round without name")]
        public virtual void CannotCreateDualTournamentRoundWithoutName()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create dual tournament round without name", null, ((string[])(null)));
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table34.AddRow(new string[] {
                            "Dual tournament",
                            "",
                            "3"});
#line 60
 testRunner.When("a tournament creates rounds", ((string)(null)), table34, "When ");
#line hidden
#line 63
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create round robin round without name")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create round robin round without name")]
        public virtual void CannotCreateRoundRobinRoundWithoutName()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create round robin round without name", null, ((string[])(null)));
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table35.AddRow(new string[] {
                            "Round robin",
                            "",
                            "3",
                            "1"});
#line 66
 testRunner.When("a tournament creates rounds", ((string)(null)), table35, "When ");
#line hidden
#line 69
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create round robin round with zero advancers")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create round robin round with zero advancers")]
        public virtual void CannotCreateRoundRobinRoundWithZeroAdvancers()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create round robin round with zero advancers", null, ((string[])(null)));
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table36.AddRow(new string[] {
                            "Round robin",
                            "Round robin round",
                            "3",
                            "0"});
#line 72
 testRunner.When("a tournament creates rounds", ((string)(null)), table36, "When ");
#line hidden
#line 75
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create round robin round with less than zero advancers")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create round robin round with less than zero advancers")]
        public virtual void CannotCreateRoundRobinRoundWithLessThanZeroAdvancers()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create round robin round with less than zero advancers", null, ((string[])(null)));
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table37.AddRow(new string[] {
                            "Round robin",
                            "Round robin round 1",
                            "3",
                            "-1"});
                table37.AddRow(new string[] {
                            "Round robin",
                            "Round robin round 2",
                            "3",
                            "-2"});
                table37.AddRow(new string[] {
                            "Round robin",
                            "Round robin round 3",
                            "3",
                            "-3"});
#line 78
 testRunner.When("a tournament creates rounds", ((string)(null)), table37, "When ");
#line hidden
#line 83
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
  testRunner.And("created round 1 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
  testRunner.And("created round 2 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create bracket round with even best ofs")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create bracket round with even best ofs")]
        public virtual void CannotCreateBracketRoundWithEvenBestOfs()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create bracket round with even best ofs", null, ((string[])(null)));
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table38.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 1",
                            "0"});
                table38.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 2",
                            "2"});
                table38.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 3",
                            "4"});
#line 88
 testRunner.When("a tournament creates rounds", ((string)(null)), table38, "When ");
#line hidden
#line 93
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
  testRunner.And("created round 1 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
  testRunner.And("created round 2 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create dual tournament round with even best ofs")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create dual tournament round with even best ofs")]
        public virtual void CannotCreateDualTournamentRoundWithEvenBestOfs()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create dual tournament round with even best ofs", null, ((string[])(null)));
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table39.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 1",
                            "0"});
                table39.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 2",
                            "2"});
                table39.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 3",
                            "4"});
#line 98
 testRunner.When("a tournament creates rounds", ((string)(null)), table39, "When ");
#line hidden
#line 103
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
  testRunner.And("created round 1 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
  testRunner.And("created round 2 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create round robin round with even best ofs")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create round robin round with even best ofs")]
        public virtual void CannotCreateRoundRobinRoundWithEvenBestOfs()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create round robin round with even best ofs", null, ((string[])(null)));
#line 107
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table40.AddRow(new string[] {
                            "Round robin",
                            "Round robin round 1",
                            "0",
                            "1"});
                table40.AddRow(new string[] {
                            "Round robin",
                            "Round robin round 2",
                            "2",
                            "1"});
                table40.AddRow(new string[] {
                            "Round robin",
                            "Round robin round 3",
                            "4",
                            "1"});
#line 108
 testRunner.When("a tournament creates rounds", ((string)(null)), table40, "When ");
#line hidden
#line 113
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
  testRunner.And("created round 1 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
  testRunner.And("created round 2 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create bracket round with best ofs less than zero")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create bracket round with best ofs less than zero")]
        public virtual void CannotCreateBracketRoundWithBestOfsLessThanZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create bracket round with best ofs less than zero", null, ((string[])(null)));
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table41.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 1",
                            "-1"});
                table41.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 2",
                            "-2"});
                table41.AddRow(new string[] {
                            "Bracket",
                            "Bracket round 3",
                            "-3"});
#line 118
 testRunner.When("a tournament creates rounds", ((string)(null)), table41, "When ");
#line hidden
#line 123
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
  testRunner.And("created round 1 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
  testRunner.And("created round 2 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create dual tournament round with best ofs less than zero")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create dual tournament round with best ofs less than zero")]
        public virtual void CannotCreateDualTournamentRoundWithBestOfsLessThanZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create dual tournament round with best ofs less than zero", null, ((string[])(null)));
#line 127
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table42.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 1",
                            "-1"});
                table42.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 2",
                            "-2"});
                table42.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round 3",
                            "-3"});
#line 128
 testRunner.When("a tournament creates rounds", ((string)(null)), table42, "When ");
#line hidden
#line 133
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
  testRunner.And("created round 1 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
  testRunner.And("created round 2 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot create round robin round with best ofs less than zero")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot create round robin round with best ofs less than zero")]
        public virtual void CannotCreateRoundRobinRoundWithBestOfsLessThanZero()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot create round robin round with best ofs less than zero", null, ((string[])(null)));
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table43.AddRow(new string[] {
                            "Round robin",
                            "Round robin round 1",
                            "-1",
                            "1"});
                table43.AddRow(new string[] {
                            "Round robin",
                            "Round robin round 2",
                            "-2",
                            "1"});
                table43.AddRow(new string[] {
                            "Round robin",
                            "Round robin round 3",
                            "-3",
                            "1"});
#line 138
 testRunner.When("a tournament creates rounds", ((string)(null)), table43, "When ");
#line hidden
#line 143
 testRunner.Then("created round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
  testRunner.And("created round 1 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
  testRunner.And("created round 2 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Can fetch previous round from round with round predecessor")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Can fetch previous round from round with round predecessor")]
        public virtual void CanFetchPreviousRoundFromRoundWithRoundPredecessor()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can fetch previous round from round with round predecessor", null, ((string[])(null)));
#line 147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table44.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round",
                            "3"});
                table44.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3"});
#line 148
 testRunner.Given("a tournament creates rounds", ((string)(null)), table44, "Given ");
#line hidden
#line 152
 testRunner.When("created round 1 fetches previous round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table45.AddRow(new string[] {
                            "Dual tournament",
                            "Dual tournament round",
                            "3"});
#line 153
 testRunner.Then("fetched round 0 in tournament should be valid with values:", ((string)(null)), table45, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot fetch previous round with first round")]
        [Xunit.TraitAttribute("FeatureTitle", "Round")]
        [Xunit.TraitAttribute("Description", "Cannot fetch previous round with first round")]
        public virtual void CannotFetchPreviousRoundWithFirstRound()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot fetch previous round with first round", null, ((string[])(null)));
#line 157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of"});
                table46.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3"});
#line 158
 testRunner.Given("a tournament creates rounds", ((string)(null)), table46, "Given ");
#line hidden
#line 161
 testRunner.When("created round 0 fetches previous round", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
 testRunner.Then("fetched round 0 in tournament should be invalid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                RoundFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                RoundFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
