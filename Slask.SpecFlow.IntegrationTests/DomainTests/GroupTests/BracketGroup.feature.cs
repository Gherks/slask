// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Slask.SpecFlow.IntegrationTests.DomainTests.GroupTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BracketGroupFeature : Xunit.IClassFixture<BracketGroupFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "BracketGroup.feature"
#line hidden
        
        public BracketGroupFeature(BracketGroupFeature.FixtureData fixtureData, InternalSpecFlow.XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BracketGroup", "\tDoes a bunch of tests on Bracket group", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adding group to bracket round creates bracket group")]
        [Xunit.TraitAttribute("FeatureTitle", "BracketGroup")]
        [Xunit.TraitAttribute("Description", "Adding group to bracket round creates bracket group")]
        [Xunit.TraitAttribute("Category", "BracketGroupTag")]
        public virtual void AddingGroupToBracketRoundCreatesBracketGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "BracketGroupTag"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding group to bracket round creates bracket group", null, new string[] {
                        "BracketGroupTag"});
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("a tournament named \"GSL 2019\" has been created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table1.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3",
                            "1"});
#line 7
  testRunner.And("created tournament 0 adds rounds", ((string)(null)), table1, "And ");
#line hidden
#line 10
 testRunner.When("group is added to created round 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
 testRunner.Then("group 0 should be valid of type \"Bracket\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start time in matches in bracket group is spaced with one hour upon creation")]
        [Xunit.TraitAttribute("FeatureTitle", "BracketGroup")]
        [Xunit.TraitAttribute("Description", "Start time in matches in bracket group is spaced with one hour upon creation")]
        public virtual void StartTimeInMatchesInBracketGroupIsSpacedWithOneHourUponCreation()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start time in matches in bracket group is spaced with one hour upon creation", null, ((string[])(null)));
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
 testRunner.Given("a tournament named \"GSL 2019\" has been created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table2.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3",
                            "1"});
#line 15
  testRunner.And("created tournament 0 adds rounds", ((string)(null)), table2, "And ");
#line hidden
#line 18
  testRunner.And("group is added to created round 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.When("players \"Maru, Stork, Taeja, Rain, Bomber, FanTaSy, Stephano, Thorzain\" is added " +
                        "to created group 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("minutes between matches in created group 0 should be 60", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="When bracket has five participants the first match should contain two players and" +
            " parent should contain one")]
        [Xunit.TraitAttribute("FeatureTitle", "BracketGroup")]
        [Xunit.TraitAttribute("Description", "When bracket has five participants the first match should contain two players and" +
            " parent should contain one")]
        public virtual void WhenBracketHasFiveParticipantsTheFirstMatchShouldContainTwoPlayersAndParentShouldContainOne()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When bracket has five participants the first match should contain two players and" +
                    " parent should contain one", null, ((string[])(null)));
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("a tournament named \"GSL 2019\" with users \"Stålberto, Bönis, Guggelito\" added to i" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table3.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3",
                            "1"});
#line 31
  testRunner.And("created tournament 0 adds rounds", ((string)(null)), table3, "And ");
#line hidden
#line 34
  testRunner.And("group is added to created round 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.When("players \"First, Second, Third, Fourth, Fifth\" is added to created group 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Match index",
                            "Player 1 name",
                            "Player 2 name"});
                table4.AddRow(new string[] {
                            "0",
                            "First",
                            "Second"});
                table4.AddRow(new string[] {
                            "1",
                            "Third",
                            "Fourth"});
                table4.AddRow(new string[] {
                            "2",
                            "Fifth",
                            ""});
#line 36
 testRunner.Then("pariticpating players in created group 0 should be mapped accordingly", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="When bracket has seven participants the third match should contain two players an" +
            "d parent should contain one")]
        [Xunit.TraitAttribute("FeatureTitle", "BracketGroup")]
        [Xunit.TraitAttribute("Description", "When bracket has seven participants the third match should contain two players an" +
            "d parent should contain one")]
        public virtual void WhenBracketHasSevenParticipantsTheThirdMatchShouldContainTwoPlayersAndParentShouldContainOne()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When bracket has seven participants the third match should contain two players an" +
                    "d parent should contain one", null, ((string[])(null)));
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
 testRunner.Given("a tournament named \"GSL 2019\" with users \"Stålberto, Bönis, Guggelito\" added to i" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table5.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3",
                            "1"});
#line 57
  testRunner.And("created tournament 0 adds rounds", ((string)(null)), table5, "And ");
#line hidden
#line 60
  testRunner.And("group is added to created round 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.When("players \"First, Second, Third, Fourth, Fifth, Sixth, Seventh\" is added to created" +
                        " group 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Match index",
                            "Player 1 name",
                            "Player 2 name"});
                table6.AddRow(new string[] {
                            "0",
                            "First",
                            "Second"});
                table6.AddRow(new string[] {
                            "1",
                            "Third",
                            "Fourth"});
                table6.AddRow(new string[] {
                            "2",
                            "Fifth",
                            "Sixth"});
                table6.AddRow(new string[] {
                            "3",
                            "Seventh",
                            ""});
#line 62
 testRunner.Then("pariticpating players in created group 0 should be mapped accordingly", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="When bracket has nine participants the first match should contain two players and" +
            " parent should contain one")]
        [Xunit.TraitAttribute("FeatureTitle", "BracketGroup")]
        [Xunit.TraitAttribute("Description", "When bracket has nine participants the first match should contain two players and" +
            " parent should contain one")]
        public virtual void WhenBracketHasNineParticipantsTheFirstMatchShouldContainTwoPlayersAndParentShouldContainOne()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("When bracket has nine participants the first match should contain two players and" +
                    " parent should contain one", null, ((string[])(null)));
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
 testRunner.Given("a tournament named \"GSL 2019\" with users \"Stålberto, Bönis, Guggelito\" added to i" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table7.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3",
                            "1"});
#line 87
  testRunner.And("created tournament 0 adds rounds", ((string)(null)), table7, "And ");
#line hidden
#line 90
  testRunner.And("group is added to created round 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.When("players \"First, Second, Third, Fourth, Fifth, Sixth, Seventh, Eighth, Ninth\" is a" +
                        "dded to created group 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Match index",
                            "Player 1 name",
                            "Player 2 name"});
                table8.AddRow(new string[] {
                            "0",
                            "First",
                            "Second"});
                table8.AddRow(new string[] {
                            "1",
                            "Third",
                            "Fourth"});
                table8.AddRow(new string[] {
                            "2",
                            "Fifth",
                            "Sixth"});
                table8.AddRow(new string[] {
                            "3",
                            "Seventh",
                            "Eighth"});
                table8.AddRow(new string[] {
                            "4",
                            "Ninth",
                            ""});
#line 92
 testRunner.Then("pariticpating players in created group 0 should be mapped accordingly", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Bracket progression goes as expected")]
        [Xunit.TraitAttribute("FeatureTitle", "BracketGroup")]
        [Xunit.TraitAttribute("Description", "Bracket progression goes as expected")]
        public virtual void BracketProgressionGoesAsExpected()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bracket progression goes as expected", null, ((string[])(null)));
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 117
 testRunner.Given("a tournament named \"GSL 2019\" with users \"Stålberto, Bönis, Guggelito\" added to i" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Round type",
                            "Round name",
                            "Best of",
                            "Advancing amount"});
                table9.AddRow(new string[] {
                            "Bracket",
                            "Bracket round",
                            "3",
                            "1"});
#line 118
  testRunner.And("created tournament 0 adds rounds", ((string)(null)), table9, "And ");
#line hidden
#line 121
  testRunner.And("group is added to created round 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
  testRunner.And("players \"Maru, Stork, Taeja, Rain, Bomber, FanTaSy, Stephano, Thorzain\" is added " +
                        "to created group 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Created tournament index",
                            "Round index",
                            "Group index"});
                table10.AddRow(new string[] {
                            "0",
                            "0",
                            "0"});
#line 123
  testRunner.And("groups within created tournament is played out and betted on", ((string)(null)), table10, "And ");
#line hidden
#line 126
 testRunner.Then("advancing players in created group 0 is exactly \"Maru\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BracketGroupFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BracketGroupFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
